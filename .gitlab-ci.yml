---
# yamllint disable rule:line-length
# ------------------------------------------------------------------
# Global settings
# ------------------------------------------------------------------

image: "adorsys/ci-build:latest"

# ------------------------------------------------------------------
# stages
# ------------------------------------------------------------------

stages:
  - "Lint"    # Lint files and configuration
  - "Compile" # build jar and provide as artifact
  - "Test"    # run tests and code quality checks
  - "Package" # dockerize jar and push to docker registry
  - "Deploy"  # push to openshift registry (snapshot deployment) or release registry
  - "Notification" # Notify to specific channel about applications versions

# ------------------------------------------------------------------
# variables
# ------------------------------------------------------------------

variables:
  SONAR_HOST: "https://psd2-quality.cloud.adorsys.de"

  DOCKER_IMAGE_NAME_CNT_MGMNT: "xs2a-consent-management"
  DOCKER_IMAGE_NAME_ASPSP_PROFILE: "xs2a-aspsp-profile"
  DOCKER_IMAGE_NAME_XS2A: "xs2a-service"
  DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR: "xs2a-certificate-generator"

  ###########################
  # Public Dockerhub Images #
  ###########################

  DOCKERHUB_REGISTRY: "docker.io"

  DOCKERHUB_NAMESPACE: "adorsys"

  ############################
  # Private Openshift Images #
  ############################

  OPENSHIFT_NAMESPACE_SUPPORT8X: "adorsys-psd2-support8x"

  ###########################
  # Build variables         #
  ###########################

  JAVA_TOOL_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:MaxRAM=3G -XX:MaxRAMFraction=3"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

# ------------------------------------------------------------------
# reusable yaml anchors
# ------------------------------------------------------------------

.build_java: &build_java
  script:
    - jabba use ${JAVA_VERSION}
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - env BUILD_NUMBER=$CI_PIPELINE_IID ./scripts/set_xs2a_connector_version_in_swagger.sh
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp -DskipITs -DskipTests -Dci.build.number=Build\:${CI_PIPELINE_ID} clean install

.java_tests: &java_tests
  script:
    - jabba use $JAVA_VERSION
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp -DskipITs --fail-at-end clean install -q

# Build docker images and push them to Dockerhub (depending on ${DOCKER_TAG})
.build_dockerhub_image: &build_dockerhub_image
  script:
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CNT_MGMNT}:${DOCKER_TAG}" consent-management/cms-standalone-service
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_ASPSP_PROFILE}:${DOCKER_TAG}" aspsp-profile/aspsp-profile-server
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A}:${DOCKER_TAG}" xs2a-standalone-starter
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR}:${DOCKER_TAG}" certificate-generator

    - docker login -u ${DOCKER_HUB_LOGIN} -p ${DOCKER_HUB_PASS}
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CNT_MGMNT}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_ASPSP_PROFILE}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A}:${DOCKER_TAG}"
    - docker push "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR}:${DOCKER_TAG}"
    - docker logout

# Copy Dockerhub images to Openshift (depending on ${DOCKER_TAG} and ${OPENSHIFT_NAMESPACE})
.deploy_openshift: &deploy_openshift
  script:
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CNT_MGMNT}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_CNT_MGMNT}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_ASPSP_PROFILE}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_ASPSP_PROFILE}:latest"
    - >-
      skopeo copy
      --dest-creds=openshift:${OPENSHIFT_TOKEN}
      "docker://${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR}:${DOCKER_TAG}"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR}:latest"

# ------------------------------------------------------------------
# jobs
# ------------------------------------------------------------------

#-------------------------------------------------------------------
# lint
#-------------------------------------------------------------------

Lint:Docker_compose:
  image: maven:3.6-jdk-11-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt update && apt install yamllint docker-compose make -yq
    - echo "Run Docker compose lint"
    - docker-compose -f docker-compose.yml config  -q

Lint:Ci_file:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install yamllint python3-pkg-resources -yq
    - echo "Run Gitlab ci file lint"
    - yamllint -d relaxed .gitlab-ci.yml

Lint:XS2A_yaml_json_xml:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run Xs2A core lint"
    - find ./ -type f -name "*.json" -exec jsonlint -q {} \; # lint all json
# commented cause get many small errors for yaml with spaces empty lines and etc
#    - find ./ -type f \( -name "*.yml" -o -name "*.yaml" \) -exec yamllint -d "{extends: relaxed, rules: {line-length: {max: 160}}}" {} \;
# commented cause get error Unsupported version '1.1'
#	  - find ./ -type f \( -iname "*.xml" ! -iname pom.xml \) -exec xmllint --noout {} \;

Lint:XS2A_PMD_CPD_Report:
  image: maven:3.6-jdk-11-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt update && apt install make -yq
    - echo "Test java code for PMD and CPD"
    - echo "DOCKER_HOST=$DOCKER_HOST"
    - mvn -ntp -Dmaven.test.skip=true package pmd:check # commented cause many duplications pmd:cpd-check
  cache: {}
  artifacts:
    paths:
      - "qa/pmd/pmd-ruleset.xml"
      - "**/**/*/pmd.html"
      - "**/*/pmd.xml"
    name: "${CI_PROJECT_NAME}-${CI_BUILD_REF_NAME#*v}-pmd"
    expire_in: "10 day"

Lint:XS2A_core_dockerfiles:
  image: debian:stretch-slim
  stage: "Lint"
  except:
    - schedules
    - develop
    - master
  script:
    - apt-get update && apt-get install jsonlint yamllint libxml2-utils make curl -yq && ln -s /usr/bin/jsonlint-php /usr/bin/jsonlint
    - curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
    - echo "Run Xs2a core dockerfile check"
    - docker run --rm -i hadolint/hadolint < ./consent-management/cms-standalone-service/Dockerfile
    - docker run --rm -i hadolint/hadolint < ./aspsp-profile/aspsp-profile-server/Dockerfile
    - docker run --rm -i hadolint/hadolint < ./xs2a-standalone-starter/Dockerfile
    - docker run --rm -i hadolint/hadolint < ./certificate-generator/Dockerfile

#-------------------------------------------------------------------
# Compile
#-------------------------------------------------------------------

Build:XS2A_Java11:
  stage: "Compile"
  variables:
    JAVA_VERSION: "system@1.11"
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  <<: *build_java
  artifacts:
    paths:
      - "xs2a-standalone-starter/target/xs2a-standalone-starter-exec.jar"
      - "consent-management/cms-standalone-service/target/consent-management*jar"
      - "aspsp-profile/aspsp-profile-server/target/aspsp-profile*jar"
      - "certificate-generator/target/certificate-generator.jar"
      - "**/target/*"
      - "**/**/target/*"
      - ".m2/repository/de/adorsys/psd2/*/*"
    name: "${CI_PROJECT_NAME}-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

#-------------------
# Test
#-------------------

Test:IT_Java11:
  stage: "Test"
  image: maven:3.6.3-jdk-11
  except:
    - schedules
  script:
#    - jabba use ${JAVA_VERSION}
    - docker info
    - echo "DOCKER_HOST=$DOCKER_HOST"
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp failsafe:integration-test failsafe:verify
  variables:
    JAVA_VERSION: "system@1.11"
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"

Test:DOCKER_test_image_build:
  stage: "Test"
  except:
    - schedules
  script:
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CNT_MGMNT}:${DOCKER_TAG}" consent-management/cms-standalone-service
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_ASPSP_PROFILE}:${DOCKER_TAG}" aspsp-profile/aspsp-profile-server
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_XS2A}:${DOCKER_TAG}" xs2a-standalone-starter
    - docker build -t "${DOCKERHUB_REGISTRY}/${DOCKERHUB_NAMESPACE}/${DOCKER_IMAGE_NAME_CERTIFICATE_GENERATOR}:${DOCKER_TAG}" certificate-generator
  variables:
    DOCKER_TAG: develop

Test:Javadoc_Java11:
  stage: "Test"
  except:
    - schedules
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
    JAVA_VERSION: "system@1.11"
  script:
    - jabba use ${JAVA_VERSION}
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp -Dmaven.test.skip=true -Pjavadoc verify javadoc:javadoc

Test:Unit_Tests_XS2A_Java11:
  stage: "Test"
  except:
    - schedules
  <<: *java_tests
  variables:
    JAVA_VERSION: "system@1.11"
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"

Test:Sonarcube:
  stage: "Test"
  needs: []
  except:
    - schedules
    - develop
  script:
    - jabba use system@1.11
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -ntp --fail-at-end clean install
    - mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_TOKEN}

Test:AsciiDoc:
  stage: "Test"
  except:
    - schedules
  image: adorsys/arc42-tools
  variables:
    JAVA_TOOL_OPTIONS: "-Djavax.net.ssl.trustStorePassword=changeit -XX:MaxRAM=3G"
  script:
    - make pages

###############
# support8.x  #
###############
#Build Support-8.x images and deploy to support-8.x

Push to DockerHub (Support-8.x):
  stage: "Package"
  only:
    - support-8.x
  variables:
    DOCKER_TAG: support8x
  <<: *build_dockerhub_image

Deploy to Openshift (Support-8.x):
  stage: "Deploy"
  cache: {}
  dependencies: []
  only:
    - support-8.x
  variables:
    GIT_STRATEGY: none
    DOCKER_TAG: support8x # Dockerhub source tag
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_SUPPORT8X} # Openshift target namespace
  <<: *deploy_openshift

Notify Slack channel (Support):
  image: "bash:4"
  stage: "Notification"
  cache: {}
  only:
    - support-8.x
  variables:
    HELM_RELEASE: support8x-psd2
    ENV_JSON_FILE: scripts/notifications/psd2-support8x.json
    SLACK_CHANNEL: ${SLACK_PSD2_SUPPORT_CHANNEL}
  script:
    - apk update && apk add jq curl
    - sleep 60
    - scripts/notifications/./webhook_slack.sh xs2a cms aspspprofile ledgers

# Build RELEASE image support8.x
Push to DockerHub (release):
  stage: "Package"
  only:
    - tags
  variables:
    DOCKER_TAG: ${CI_COMMIT_TAG}
  <<: *build_dockerhub_image
